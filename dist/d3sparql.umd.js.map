{"version":3,"file":"d3sparql.umd.js","sources":["../d3sparql.js"],"sourcesContent":["//\n// d3sparql.js - utilities for visualizing SPARQL results with the D3 library\n//\n//   Web site: http://github.com/ktym/d3sparql/\n//   Copyright: 2013-2015 (C) Toshiaki Katayama (ktym@dbcls.jp)\n//   License: BSD license (same as D3.js)\n//   Initial version: 2013-01-28\n//\n\nimport d3 from 'd3';\nimport 'd3-sankey';\nimport * as topojson from 'topojson-client';\n\nconst d3sparql = {\n  version: 'd3sparql.js version 2020-04-25',\n  debug: false  // set to true for showing debug information\n};\n\nexport default d3sparql;\n\n/**\n * @param {...*} messages\n */\nfunction debug(...messages) {\n  if (d3sparql.debug) {\n    const args = [];\n    for (const message of messages) {\n      switch (typeof message) {\n        case 'object':\n          args.push(JSON.stringify(message));\n          break;\n        default:\n          args.push(message);\n      }\n    }\n    console.debug(...args);\n  }\n}\n\n/**\n * Execute a SPARQL query\n * @param {string} url\n * @param {RequestInit} [init]\n * @returns {Promise<SparqlResults>}\n */\nd3sparql.fetch = async (url, init = {}) => {\n  debug(url, init);\n  const res = await fetch(url, {\n    ...init,\n    headers: {\n      ...init.headers,\n      Accept: 'application/sparql-results+json',\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error(await res.text());\n  }\n  return res.json();\n};\n\n/**\n * @param {string} endpoint\n * @param {string} sparql\n * @param {('GET'|'POST')} [type]\n * @returns {Promise<SparqlResults>}\n */\nd3sparql.query = function (endpoint, sparql, type = 'GET') {\n  const url = new URL(endpoint);\n  if (type === 'GET') {\n    url.search = `query=${encodeURIComponent(sparql)}`;\n    return d3sparql.fetch(url.href);\n  } else if (type === 'POST') {\n    // encode query as Form data\n    const formData = new FormData();\n    formData.append('query', sparql);\n    // encode Form data to x-www-form-urlencoded\n    const body = new URLSearchParams([...formData.entries()]);\n    return d3sparql.fetch(url.href, {\n      body,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      }\n    });\n  }\n\n  throw new TypeError(`unsupported query type: ${type}`);\n};\n\n\n/*\n  Convert sparql-results+json object into a JSON graph in the {\"nodes\": [], \"links\": []} form.\n  Suitable for d3.layout.force(), d3.layout.sankey() etc.\n\n  Options:\n    config = {\n      \"key1\":   \"node1\",       // SPARQL letiable name for node1 (optional; default is the 1st letiable)\n      \"key2\":   \"node2\",       // SPARQL letiable name for node2 (optional; default is the 2nd letibale)\n      \"label1\": \"node1label\",  // SPARQL letiable name for the label of node1 (optional; default is the 3rd letiable)\n      \"label2\": \"node2label\",  // SPARQL letiable name for the label of node2 (optional; default is the 4th letiable)\n      \"value1\": \"node1value\",  // SPARQL letiable name for the value of node1 (optional; default is the 5th letiable)\n      \"value2\": \"node2value\"   // SPARQL letiable name for the value of node2 (optional; default is the 6th letiable)\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.forcegraph(json, config)\n      d3sparql.sankey(json, config)\n    }\n\n  TODO:\n    Should follow the convention in the miserables.json https://gist.github.com/mbostock/4062045 to contain group for nodes and value for edges.\n*/\n/**\n *\n * @param {SparqlResults} json\n * @param {GraphConfig} [config = {}]\n * @return {{nodes: [], links: []}}\n */\nd3sparql.graph = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let key1 = config.key1 || head[0] || 'key1';\n  let key2 = config.key2 || head[1] || 'key2';\n  let label1 = config.label1 || head[2] || false;\n  let label2 = config.label2 || head[3] || false;\n  let value1 = config.value1 || head[4] || false;\n  let value2 = config.value2 || head[5] || false;\n\n  let graph = {\n    'nodes': [],\n    'links': []\n  };\n  let valueToIndexMap = new Map();\n  let index = 0;\n  for (let i = 0; i < data.length; i++) {\n    let datum = data[i];\n    let key1Val = datum[key1].value;\n    let key2Val = datum[key2].value;\n    let label1Val = label1 ? datum[label1].value : key1Val;\n    let label2Val = label2 ? datum[label2].value : key2Val;\n    let value1Val = value1 ? datum[value1].value : false;\n    let value2Val = value2 ? datum[value2].value : false;\n    if (!valueToIndexMap.has(key1Val)) {\n      graph.nodes.push({ 'key': key1Val, 'label': label1Val, 'value': value1Val });\n      valueToIndexMap.set(key1Val, index);\n      index++;\n    }\n    if (!valueToIndexMap.has(key2Val)) {\n      graph.nodes.push({ 'key': key2Val, 'label': label2Val, 'value': value2Val });\n      valueToIndexMap.set(key2Val, index);\n      index++;\n    }\n    graph.links.push({ 'source': valueToIndexMap.get(key1Val), 'target': valueToIndexMap.get(key2Val) });\n  }\n  debug(graph);\n  return graph;\n};\n\n/*\n  Convert sparql-results+json object into a JSON tree of {\"name\": name, \"value\": size, \"children\": []} format like in the flare.json file.\n\n  Suitable for d3.layout.hierarchy() family\n    * cluster:    d3sparql.dendrogram()\n    * pack:       d3sparql.circlepack()\n    * partition:  d3sparql.sunburst()\n    * tree:       d3sparql.roundtree()\n    * treemap:    d3sparql.treemap(), d3sparql.treemapzoom()\n\n  Options:\n    config = {\n      \"root\":   \"root_name\",    // SPARQL letiable name for root node (optional; default is the 1st letiable)\n      \"parent\": \"parent_name\",  // SPARQL letiable name for parent node (optional; default is the 2nd letiable)\n      \"child\":  \"child_name\",   // SPARQL letiable name for child node (ptional; default is the 3rd letiable)\n      \"value\":  \"value_name\"    // SPARQL letiable name for numerical value of the child node (optional; default is the 4th letiable or \"value\")\n    }\n\n  Synopsis:\n    d3sparql.sparql(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.roundtree(json, config)\n      d3sparql.dendrogram(json, config)\n      d3sparql.sunburst(json, config)\n      d3sparql.treemap(json, config)\n      d3sparql.treemapzoom(json, config)\n    }\n*/\n/**\n *\n * @param {SparqlResults} json\n * @param {TreeConfig} [config={}]\n * @return {{children: *, name: *, value: number}|{name: *, value: unknown}}\n */\nd3sparql.tree = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let rootKey = config.root || head[0];\n  let parentKey = config.parent || head[1];\n  let childKey = config.child || head[2];\n  let valueKey = config.value || head[3] || 'value';\n\n  /**\n   * @type {Map<string, string[]>}\n   */\n  let pairMap = new Map();\n  /**\n   * @type {Map<string, number|string>}\n   */\n  let sizeMap = new Map();\n  let root = data[0][rootKey].value;\n  let parent = true;\n  let child = parent;\n  // Build memoized access maps\n  for (let i = 0; i < data.length; i++) {\n    const datum = data[i];\n    parent = datum[parentKey].value;\n    child = datum[childKey].value;\n    if (parent !== child) {\n      /** @type {string[]} */\n      let children;\n      if (pairMap.has(parent)) {\n        children = pairMap.get(parent);\n        children.push(child);\n      } else {\n        children = [child];\n      }\n      pairMap.set(parent, children);\n      if (datum[valueKey]) {\n        sizeMap.set(child, datum[valueKey].value);\n      }\n    }\n  }\n\n  /**\n   * @param {string} nodeName\n   * @return {TreeNode}\n   */\n  let traverse = (nodeName) => {\n    let list = pairMap.get(nodeName);\n    if (!list) {\n      return { 'name': nodeName, 'value': sizeMap.get(nodeName) || 1 };\n    }\n    let children = list.map((d) => traverse(d));\n    // sum of values of children\n    let subtotal = d3.sum(children, (d) => d.value);\n    // add a value of parent if exists\n    let total = d3.sum([subtotal, sizeMap.get(nodeName)]);\n    return { 'name': nodeName, 'children': children, 'value': total };\n  };\n\n  let tree = traverse(root);\n\n  debug(tree);\n  return tree;\n};\n\n/*\n  Rendering sparql-results+json object containing multiple rows into a HTML table\n\n  Options:\n    config = {\n      \"selector\": \"#result\"\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.htmltable(json, config)\n    }\n\n  CSS:\n    <style>\n    table {\n      margin: 10px;\n    }\n    th {\n      background: #eeeeee;\n    }\n    th:first-letter {\n       text-transform: capitalize;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {HTMLTableConfig} [config={}]\n */\nd3sparql.htmltable = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let columns = config.columns || head;\n  let headers = config.headers || columns;\n  let selector = config.selector || null;\n  let limit = config.limit !== undefined ? config.limit : data.length;\n  let offset = config.offset !== undefined ? config.offset : 0;\n\n  data = data.slice(offset, offset + limit);\n\n  let table = d3sparql\n    .select(selector, 'htmltable')\n    .append('table')\n    .attr('class', 'table table-bordered');\n\n  debug('Table');\n  debug(table);\n  let thead = table.append('thead');\n  let tbody = table.append('tbody');\n  thead.append('tr')\n    .selectAll('th')\n    .data(headers)\n    .enter()\n    .append('th')\n    .text((col) => col);\n  let rows = tbody.selectAll('tr')\n    .data(data)\n    .enter()\n    .append('tr');\n  let cells = rows.selectAll('td')\n    .data((row) => columns.map((col) => row[col] ? row[col].value : ''))\n    .enter()\n    .append('td')\n    .text((val) => val);\n\n  debug('Table cells');\n  debug(cells);\n\n  // default CSS\n  table.style({\n    'margin': '10px'\n  });\n  table.selectAll('th').style({\n    'background': '#eeeeee',\n    'text-transform': 'capitalize',\n  });\n};\n\n/*\n  Rendering sparql-results+json object containing one row into a HTML table\n\n  Options:\n    config = {\n      \"selector\": \"#result\"\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.htmlhash(json, config)\n    }\n\n  CSS:\n    <style>\n    table {\n      margin: 10px;\n    }\n    th {\n      background: #eeeeee;\n    }\n    th:first-letter {\n       text-transform: capitalize;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {HTMLHashConfig} [config={}]\n */\nd3sparql.htmlhash = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings[0];\n\n  let selector = config.selector || null;\n\n  let table = d3sparql\n    .select(selector, 'htmlhash')\n    .append('table')\n    .attr('class', 'table table-bordered');\n\n  let tbody = table.append('tbody');\n  let row = tbody.selectAll('tr')\n    .data(() => head.map((col) => ({ head: col, data: data[col] ? data[col].value : '' })))\n    .enter()\n    .append('tr');\n  row.append('th')\n    .text((d) => d.head);\n  row.append('td')\n    .text((d) => d.data);\n\n  // default CSS\n  table.style({\n    'margin': '10px'\n  });\n  table.selectAll('th').style({\n    'background': '#eeeeee',\n    'text-transform': 'capitalize',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a bar chart\n\n  References:\n    http://bl.ocks.org/mbostock/3885304\n    http://bl.ocks.org/mbostock/4403522\n\n  Options:\n    config = {\n      \"label_x\":  \"Prefecture\",  // label for x-axis (optional; default is same as let_x)\n      \"label_y\":  \"Area\",        // label for y-axis (optional; default is same as let_y)\n      \"let_x\":    \"pref\",        // SPARQL letiable name for x-axis (optional; default is the 1st letiable)\n      \"let_y\":    \"area\",        // SPARQL letiable name for y-axis (optional; default is the 2nd letiable)\n      \"width\":    850,           // canvas width (optional)\n      \"height\":   300,           // canvas height (optional)\n      \"margin\":   40,            // canvas margin (optional)\n      \"selector\": \"#result\"\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.barchart(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .bar {\n      fill: steelblue;\n    }\n    .bar:hover {\n      fill: brown;\n    }\n    .axis {\n      font: 10px sans-serif;\n    }\n    .axis path,\n    .axis line {\n      fill: none;\n      stroke: #000000;\n      shape-rendering: crispEdges;\n    }\n    .x.axis path {\n      display: none;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {BarChartConfig} [config={}]\n */\nd3sparql.barchart = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let label_x = config.label_x || head[0];\n  let label_y = config.label_y || head[1];\n  let let_x = config.let_x || head[0];\n  let let_y = config.let_y || head[1];\n  let width = config.width || 750;\n  let height = config.height || 300;\n  let margin = config.margin || 80;   // TODO: to make use of {top: 10; right: 10; bottom: 80; left: 80}\n  let selector = config.selector || null;\n\n  let scale_x = d3.scale.ordinal().rangeRoundBands([0, width - margin], 0.1);\n  let scale_y = d3.scale.linear().range([height - margin, 0]);\n  let axis_x = d3.svg.axis().scale(scale_x).orient('bottom');\n  let axis_y = d3.svg.axis().scale(scale_y).orient('left');  // .ticks(10, \"%\")\n  scale_x.domain(data.map((d) => d[let_x].value));\n  scale_y.domain(d3.extent(data, (d) => parseInt(d[let_y].value)));\n\n  let svg = d3sparql.select(selector, 'barchart').append('svg')\n    .attr('width', width)\n    .attr('height', height);\n//    .append(\"g\")\n//    .attr(\"transform\", \"translate(\" + margin + \",\" + 0 + \")\")\n\n  let ax = svg.append('g')\n    .attr('class', 'axis x')\n    .attr('transform', 'translate(' + margin + ',' + (height - margin) + ')')\n    .call(axis_x);\n\n  let ay = svg.append('g')\n    .attr('class', 'axis y')\n    .attr('transform', 'translate(' + margin + ',0)')\n    .call(axis_y);\n\n  let bar = svg.selectAll('.bar')\n    .data(data)\n    .enter()\n    .append('rect')\n    .attr('transform', 'translate(' + margin + ',' + 0 + ')')\n    .attr('class', 'bar')\n    .attr('x', (d) => scale_x(d[let_x].value))\n    .attr('width', scale_x.rangeBand())\n    .attr('y', (d) => scale_y(d[let_y].value))\n    .attr('height', (d) => height - scale_y(parseInt(d[let_y].value)) - margin);\n\n  ax.selectAll('text')\n    .attr('dy', '.35em')\n    .attr('x', 10)\n    .attr('y', 0)\n    .attr('transform', 'rotate(90)')\n    .style('text-anchor', 'start');\n  ax.append('text')\n    .attr('class', 'label')\n    .text(label_x)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(' + ((width - margin) / 2) + ',' + (margin - 5) + ')');\n  ay.append('text')\n    .attr('class', 'label')\n    .text(label_y)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'rotate(-90)')\n    .attr('x', 0 - (height / 2))\n    .attr('y', 0 - (margin - 20));\n\n  // default CSS/SVG\n  bar.attr({\n    'fill': 'steelblue',\n  });\n  svg.selectAll('.axis').attr({\n    'stroke': 'black',\n    'fill': 'none',\n    'shape-rendering': 'crispEdges',\n  });\n  svg.selectAll('text').attr({\n    'stroke': 'none',\n    'fill': 'black',\n    'font-size': '8pt',\n    'font-family': 'sans-serif',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a pie chart\n\n  References:\n    http://bl.ocks.org/mbostock/3887235 Pie chart\n    http://bl.ocks.org/mbostock/3887193 Donut chart\n\n  Options:\n    config = {\n      \"label\":    \"pref\",    // SPARQL letiable name for slice label (optional; default is the 1st letiable)\n      \"size\":     \"area\",    // SPARQL letiable name for slice value (optional; default is the 2nd letiable)\n      \"width\":    700,       // canvas width (optional)\n      \"height\":   600,       // canvas height (optional)\n      \"margin\":   10,        // canvas margin (optional)\n      \"hole\":     50,        // radius size of a center hole (optional; 0 for pie, r > 0 for doughnut)\n      \"selector\": \"#result\"\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.piechart(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .label {\n      font: 10px sans-serif;\n    }\n    .arc path {\n      stroke: #ffffff;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {PieChartConfig} [config={}]\n */\nd3sparql.piechart = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let label = config.label || head[0];\n  let size = config.size || head[1];\n  let width = config.width || 700;\n  let height = config.height || 700;\n  let margin = config.margin || 10;\n  let selector = config.selector || null;\n  let holeSize = config.hole || 100;\n\n  let radius = Math.min(width, height) / 2 - margin;\n  let hole = Math.max(Math.min(radius - 50, holeSize), 0);\n  let color = d3.scale.category20();\n\n  let arc = d3.svg.arc()\n    .outerRadius(radius)\n    .innerRadius(hole);\n\n  let pie = d3.layout.pie()\n    //.sort(null)\n    .value((d) => d[size].value);\n\n  let svg = d3sparql\n    .select(selector, 'piechart')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .append('g')\n    .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n  let g = svg.selectAll('.arc')\n    .data(pie(data))\n    .enter()\n    .append('g')\n    .attr('class', 'arc');\n  let slice = g.append('path')\n    .attr('d', arc)\n    .attr('fill', (d, i) => color(i));\n  let text = g.append('text')\n    .attr('class', 'label')\n    .attr('transform', (d) => `translate(${arc.centroid(d)})`)\n    .attr('dy', '.35em')\n    .attr('text-anchor', 'middle')\n    .text((d) => d.data[label].value);\n\n  // default CSS/SVG\n  slice.attr({\n    'stroke': '#ffffff',\n  });\n  // TODO: not working?\n  svg.selectAll('text').attr({\n    'stroke': 'none',\n    'fill': 'black',\n    'font-size': '20px',\n    'font-family': 'sans-serif',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a scatter plot\n\n  References:\n    http://bl.ocks.org/mbostock/3244058\n\n  Options:\n    config = {\n      \"label_x\":  \"Size\",    // label for x-axis (optional; default is same as let_x)\n      \"label_y\":  \"Count\",   // label for y-axis (optional; default is same as let_y)\n      \"let_x\":    \"size\",    // SPARQL letiable name for x-axis values (optional; default is the 1st letiable)\n      \"let_y\":    \"count\",   // SPARQL letiable name for y-axis values (optional; default is the 2nd letiable)\n      \"let_r\":    \"volume\",  // SPARQL letiable name for radius (optional; default is the 3rd letiable)\n      \"min_r\":    1,         // minimum radius size (optional; default is 1)\n      \"max_r\":    20,        // maximum radius size (optional; default is 20)\n      \"width\":    850,       // canvas width (optional)\n      \"height\":   300,       // canvas height (optional)\n      \"margin_x\": 80,        // canvas margin x (optional)\n      \"margin_y\": 40,        // canvas margin y (optional)\n      \"selector\": \"#result\"\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.scatterplot(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .label {\n      font-size: 10pt;\n    }\n    .node circle {\n      stroke: black;\n      stroke-width: 1px;\n      fill: pink;\n      opacity: 0.5;\n    }\n    </style>\n*/\n/**\n *\n * @param {SparqlResults} json\n * @param {ScatterplotConfig} config\n */\nd3sparql.scatterplot = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let label_x = config.label_x || head[0] || 'x';\n  let label_y = config.label_y || head[1] || 'y';\n  let label_r = config.label_r || head[2] || 'r';\n  let let_x = config.let_x || head[0];\n  let let_y = config.let_y || head[1];\n  let let_r = config.let_r || head[2] || 5;\n  let min_r = config.min_r || 1;\n  let max_r = config.max_r || 20;\n  let width = config.width || 850;\n  let height = config.height || 300;\n  let margin_x = config.margin_x || 80;\n  let margin_y = config.margin_y || 40;\n  let selector = config.selector || null;\n\n  let extent_x = d3.extent(data, (d) => parseInt(d[let_x].value));\n  let extent_y = d3.extent(data, (d) => parseInt(d[let_y].value));\n  let extent_r = d3.extent(data, (d) => parseInt(d[let_r] ? d[let_r].value : let_r));\n\n  let scale_x = d3.scale.linear().range([margin_x, width - margin_x]).domain(extent_x);\n  let scale_y = d3.scale.linear().range([height - margin_y, margin_y]).domain(extent_y);\n  let scale_r = d3.scale.linear().range([min_r, max_r]).domain(extent_r);\n  let axis_x = d3.svg.axis().scale(scale_x);\n  let axis_y = d3.svg.axis().scale(scale_y).orient('left');\n\n  let svg = d3sparql\n    .select(selector, 'scatterplot')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  let circle = svg.selectAll('circle')\n    .data(data)\n    .enter()\n    .append('circle')\n    .attr('class', 'node')\n    .attr('cx', (d) => scale_x(d[let_x].value))\n    .attr('cy', (d) => scale_y(d[let_y].value))\n    .attr('r', (d) => scale_r(d[let_r] ? d[let_r].value : let_r))\n    .attr('opacity', 0.5)\n    .append('title')\n    .text((d) => d[label_r] ? d[label_r].value : label_r);\n\n  let ax = svg.append('g')\n    .attr('class', 'x axis')\n    .attr('transform', 'translate(0,' + (height - margin_y) + ')')\n    .call(axis_x);\n\n  let ay = svg.append('g')\n    .attr('class', 'y axis')\n    .attr('transform', 'translate(' + margin_x + ',0)')\n    .call(axis_y);\n\n  ax.append('text')\n    .attr('class', 'label')\n    .text(label_x)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(' + ((width - margin_x) / 2) + ',' + (margin_y - 5) + ')');\n  ay.append('text')\n    .attr('class', 'label')\n    .text(label_y)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'rotate(-90)')\n    .attr('x', 0 - (height / 2))\n    .attr('y', 0 - (margin_x - 20));\n\n  // default CSS/SVG\n  ax.attr({\n    'stroke': 'black',\n    'fill': 'none',\n  });\n  ay.attr({\n    'stroke': 'black',\n    'fill': 'none',\n  });\n  // This doesn't work with .append(\"circle\") with .append(\"title\") for tooltip\n  circle.attr({\n    'stroke': 'gray',\n    'stroke-width': '1px',\n    'fill': 'lightblue',\n    'opacity': 0.5,\n  });\n  //svg.selectAll(\".label\").attr({\n  svg.selectAll('text').attr({\n    'stroke': 'none',\n    'fill': 'black',\n    'font-size': '8pt',\n    'font-family': 'sans-serif',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a force graph\n\n  References:\n    http://bl.ocks.org/mbostock/4062045\n\n  Options:\n    config = {\n      \"radius\":   12,        // static value or a function to calculate radius of nodes (optional)\n      \"charge\":   -250,      // force between nodes (optional; negative: repulsion, positive: attraction)\n      \"distance\": 30,        // target distance between linked nodes (optional)\n      \"width\":    1000,      // canvas width (optional)\n      \"height\":   500,       // canvas height (optional)\n      \"label\":    \"name\",    // SPARQL letiable name for node labels (optional)\n      \"selector\": \"#result\"\n      // options for d3sparql.graph() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.forcegraph(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .link {\n      stroke: #999999;\n    }\n    .node {\n      stroke: black;\n      opacity: 0.5;\n    }\n    circle.node {\n      stroke-width: 1px;\n      fill: lightblue;\n    }\n    text.node {\n      font-family: \"sans-serif\";\n      font-size: 8px;\n    }\n    </style>\n\n  TODO:\n    Try other d3.layout.force options.\n*/\n/**\n * @param {SparqlResults} json\n * @param {ForceGraphConfig} config\n */\nd3sparql.forcegraph = function (json, config = {}) {\n  let graph = (json.head && json.results) ? d3sparql.graph(json, config) : json;\n\n  let radius = config.radius || ((d) => d.value ? scale(d.value) : 1 + d.label.length);\n  let charge = config.charge || -500;\n  let distance = config.distance || 50;\n  let width = config.width || 1000;\n  let height = config.height || 750;\n  let label = config.label || false;\n  let selector = config.selector || null;\n\n  let scale = d3.scale.linear()\n    .domain(d3.extent(graph.nodes, (d) => parseFloat(d.value)))\n    .range([1, 20]);\n\n  let svg = d3sparql\n    .select(selector, 'forcegraph')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  let link = svg.selectAll('.link')\n    .data(graph.links)\n    .enter()\n    .append('line')\n    .attr('class', 'link');\n\n  let node = svg.selectAll('.node')\n    .data(graph.nodes)\n    .enter()\n    .append('g');\n\n  let circle = node.append('circle')\n    .attr('class', 'node')\n    .attr('r', radius);\n\n  let text = node.append('text')\n    .text((d) => d[label || 'label'])\n    .attr('class', 'node');\n\n  let force = d3.layout.force()\n    .charge(charge)\n    .linkDistance(distance)\n    .size([width, height])\n    .nodes(graph.nodes)\n    .links(graph.links)\n    .start();\n\n  force.on('tick', () => {\n    link.attr('x1', (d) => d.source.x)\n      .attr('y1', (d) => d.source.y)\n      .attr('x2', (d) => d.target.x)\n      .attr('y2', (d) => d.target.y);\n\n    text.attr('x', (d) => d.x)\n      .attr('y', (d) => d.y);\n\n    circle.attr('cx', (d) => d.x)\n      .attr('cy', (d) => d.y);\n  });\n  node.call(force.drag);\n\n  // default CSS/SVG\n  link.attr({\n    'stroke': '#999999',\n  });\n  circle.attr({\n    'stroke': 'black',\n    'stroke-width': '1px',\n    'fill': 'lightblue',\n    'opacity': 1,\n  });\n  text.attr({\n    'font-size': '8px',\n    'font-family': 'sans-serif',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a sanky graph\n\n  References:\n    https://github.com/d3/d3-plugins/tree/master/sankey\n    http://bost.ocks.org/mike/sankey/\n\n  Options:\n    config = {\n      \"width\":    1000,      // canvas width (optional)\n      \"height\":   900,       // canvas height (optional)\n      \"margin\":   50,        // canvas margin (optional)\n      \"selector\": \"#result\"\n      // options for d3sparql.graph() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.sankey(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .node rect {\n      cursor: move;\n      fill-opacity: .9;\n      shape-rendering: crispEdges;\n    }\n    .node text {\n      pointer-events: none;\n      text-shadow: 0 1px 0 #ffffff;\n    }\n    .link {\n      fill: none;\n      stroke: #000000;\n      stroke-opacity: .2;\n    }\n    .link:hover {\n      stroke-opacity: .5;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {SankeyConfig} config\n */\nd3sparql.sankey = function (json, config = {}) {\n  let graph = (json.head && json.results) ? d3sparql.graph(json, config) : json;\n\n  let width = config.width || 750;\n  let height = config.height || 1200;\n  let margin = config.margin || 10;\n  let selector = config.selector || null;\n\n  let nodes = graph.nodes;\n  let links = graph.links;\n  for (let i = 0; i < links.length; i++) {\n    links[i].value = 2;  // TODO: fix to use values on links\n  }\n  let sankey = d3.sankey()\n    .size([width, height])\n    .nodeWidth(15)\n    .nodePadding(10)\n    .nodes(nodes)\n    .links(links)\n    .layout(32);\n  let path = sankey.link();\n  let color = d3.scale.category20();\n  let svg = d3sparql\n    .select(selector, 'sankey')\n    .append('svg')\n    .attr('width', width + margin * 2)\n    .attr('height', height + margin * 2)\n    .append('g')\n    .attr('transform', `translate(${margin},${margin})`);\n\n  let link = svg\n    .selectAll('.link')\n    .data(links)\n    .enter()\n    .append('path')\n    .attr('class', 'link')\n    .attr('d', path)\n    .attr('stroke-width', (d) => Math.max(1, d.dy))\n    .sort((a, b) => b.dy - a.dy);\n\n  let node = svg\n    .selectAll('.node')\n    .data(nodes)\n    .enter()\n    .append('g')\n    .attr('class', 'node')\n    .attr('transform', (d) => `translate(${d.x},${d.y})`)\n    .call(d3.behavior.drag()\n      .origin((d) => d)\n      .on('dragstart', function () {\n        this.parentNode.appendChild(this);\n      })\n      .on('drag', dragmove)\n    );\n\n  node.append('rect')\n    .attr('width', (d) => d.dx)\n    .attr('height', (d) => d.dy)\n    .attr('fill', (d) => color(d.label))\n    .attr('opacity', 0.5);\n  node.append('text')\n    .attr('x', -6)\n    .attr('y', (d) => d.dy / 2)\n    .attr('dy', '.35em')\n    .attr('text-anchor', 'end')\n    .attr('transform', null)\n    .text((d) => d.label)\n    .filter((d) => d.x < width / 2)\n    .attr('x', 6 + sankey.nodeWidth())\n    .attr('text-anchor', 'start');\n\n  // default CSS/SVG\n  link.attr({\n    'fill': 'none',\n    'stroke': 'grey',\n    'opacity': 0.5,\n  });\n\n  function dragmove(d) {\n    d3.select(this)\n      // TODO: remove this inline assignment\n      .attr('transform', `translate(${d.x},${(d.y = Math.max(0, Math.min(height - d.dy, d3.event.y)))})`);\n    sankey.relayout();\n    link.attr('d', path);\n  }\n};\n\n\n/*\n  Rendering sparql-results+json object into a round tree\n\n  References:\n    http://bl.ocks.org/4063550  Reingold-Tilford Tree\n\n  Options:\n    config = {\n      \"diameter\": 800,       // canvas diameter (optional)\n      \"angle\":    360,       // arc angle (optional; less than 360 for wedge)\n      \"depth\":    200,       // arc depth (optional; less than diameter/2 - label length to fit)\n      \"radius\":   5,         // node radius (optional)\n      \"selector\": \"#result\"\n      // options for d3sparql.tree() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.roundtree(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .link {\n      fill: none;\n      stroke: #cccccc;\n      stroke-width: 1.5px;\n    }\n    .node circle {\n      fill: #ffffff;\n      stroke: darkgreen;\n      stroke-width: 1.5px;\n      opacity: 1;\n    }\n    .node text {\n      font-size: 10px;\n      font-family: sans-serif;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {RoundTreeConfig} config\n */\nd3sparql.roundtree = function (json, config = {}) {\n  let tree = (json.head && json.results) ? d3sparql.tree(json, config) : json;\n\n  let diameter = config.diameter || 800;\n  let angle = config.angle || 360;\n  let depth = config.depth || 200;\n  let radius = config.radius || 5;\n  let selector = config.selector || null;\n\n  let tree_layout = d3.layout.tree()\n    .size([angle, depth])\n    .separation((a, b) => (a.parent === b.parent ? 1 : 2) / a.depth);\n\n  let nodes = tree_layout.nodes(tree);\n\n  let links = tree_layout.links(nodes);\n\n  let diagonal = d3.svg.diagonal.radial()\n    .projection((d) => [d.y, d.x / 180 * Math.PI]);\n\n  let svg = d3sparql\n    .select(selector, 'roundtree')\n    .append('svg')\n    .attr('width', diameter)\n    .attr('height', diameter)\n    .append('g')\n    .attr('transform', `translate(${diameter / 2},${diameter / 2})`);\n\n  let link = svg.selectAll('.link')\n    .data(links)\n    .enter()\n    .append('path')\n    .attr('class', 'link')\n    .attr('d', diagonal);\n\n  let node = svg.selectAll('.node')\n    .data(nodes)\n    .enter()\n    .append('g')\n    .attr('class', 'node')\n    .attr('transform', (d) => `rotate(${(d.x - 90)}) translate(${d.y})`);\n\n  let circle = node\n    .append('circle')\n    .attr('r', radius);\n\n  let text = node\n    .append('text')\n    .attr('dy', '.35em')\n    .attr('text-anchor', (d) => d.x < 180 ? 'start' : 'end')\n    .attr('transform', (d) => d.x < 180 ? 'translate(8)' : 'rotate(180) translate(-8)')\n    .text((d) => d.name);\n\n  // default CSS/SVG\n  link.attr({\n    'fill': 'none',\n    'stroke': '#cccccc',\n    'stroke-width': '1.5px',\n  });\n  circle.attr({\n    'fill': '#ffffff',\n    'stroke': 'steelblue',\n    'stroke-width': '1.5px',\n    'opacity': 1,\n  });\n  text.attr({\n    'font-size': '10px',\n    'font-family': 'sans-serif',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a dendrogram\n\n  References:\n    http://bl.ocks.org/4063570  Cluster Dendrogram\n\n  Options:\n    config = {\n      \"width\":    900,       // canvas width (optional)\n      \"height\":   4500,      // canvas height (optional)\n      \"margin\":   300,       // width margin for labels (optional)\n      \"radius\":   5,         // radius of node circles (optional)\n      \"selector\": \"#result\"\n      // options for d3sparql.tree() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.dendrogram(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .link {\n      fill: none;\n      stroke: #cccccc;\n      stroke-width: 1.5px;\n    }\n    .node circle {\n      fill: #ffffff;\n      stroke: steelblue;\n      stroke-width: 1.5px;\n      opacity: 1;\n    }\n    .node text {\n      font-size: 10px;\n      font-family: sans-serif;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {DendrogramConfig} [config={}]\n */\nd3sparql.dendrogram = function (json, config = {}) {\n  let tree = (json.head && json.results) ? d3sparql.tree(json, config) : json;\n\n  let width = config.width || 800;\n  let height = config.height || 2000;\n  let margin = config.margin || 350;\n  let radius = config.radius || 5;\n  let selector = config.selector || null;\n\n  let cluster = d3.layout.cluster()\n    .size([height, width - margin]);\n\n  let diagonal = d3.svg.diagonal()\n    .projection((d) => [d.y, d.x]);\n\n  let svg = d3sparql\n    .select(selector, 'dendrogram')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .append('g')\n    .attr('transform', 'translate(40,0)');\n\n  let nodes = cluster.nodes(tree);\n  let links = cluster.links(nodes);\n\n  let link = svg.selectAll('.link')\n    .data(links)\n    .enter().append('path')\n    .attr('class', 'link')\n    .attr('d', diagonal);\n\n  let node = svg.selectAll('.node')\n    .data(nodes)\n    .enter().append('g')\n    .attr('class', 'node')\n    .attr('transform', (d) => `translate(${d.y},${d.x})`);\n\n  let circle = node\n    .append('circle')\n    .attr('r', radius);\n\n  let text = node\n    .append('text')\n    .attr('dx', (d) => (d.parent && d.children) ? -8 : 8)\n    .attr('dy', 5)\n    .style('text-anchor', (d) => (d.parent && d.children) ? 'end' : 'start')\n    .text((d) => d.name);\n\n  // default CSS/SVG\n  link.attr({\n    'fill': 'none',\n    'stroke': '#cccccc',\n    'stroke-width': '1.5px',\n  });\n  circle.attr({\n    'fill': '#ffffff',\n    'stroke': 'steelblue',\n    'stroke-width': '1.5px',\n    'opacity': 1,\n  });\n  text.attr({\n    'font-size': '10px',\n    'font-family': 'sans-serif',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a sunburst\n\n  References:\n    http://bl.ocks.org/4348373  Zoomable Sunburst\n    http://www.jasondavies.com/coffee-wheel/  Coffee Flavour Wheel\n\n  Options:\n    config = {\n      \"width\":    1000,      // canvas width (optional)\n      \"height\":   900,       // canvas height (optional)\n      \"margin\":   150,       // margin for labels (optional)\n      \"selector\": \"#result\"\n      // options for d3sparql.tree() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.sunburst(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .node text {\n      font-size: 10px;\n      font-family: sans-serif;\n    }\n    .arc {\n      stroke: #ffffff;\n      fill-rule: evenodd;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {SunburstConfig} [config={}]\n */\nd3sparql.sunburst = function (json, config = {}) {\n  let tree = (json.head && json.results) ? d3sparql.tree(json, config) : json;\n\n  let width = config.width || 1000;\n  let height = config.height || 900;\n  let margin = config.margin || 150;\n  let selector = config.selector || null;\n\n  let radius = Math.min(width, height) / 2 - margin;\n  let x = d3.scale.linear().range([0, 2 * Math.PI]);\n  let y = d3.scale.sqrt().range([0, radius]);\n  let color = d3.scale.category20();\n\n  let svg = d3sparql\n    .select(selector, 'sunburst')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .append('g')\n    .attr('transform', `translate(${width / 2},${height / 2})`);\n\n  let arc = d3.svg.arc()\n    .startAngle((d) => Math.max(0, Math.min(2 * Math.PI, x(d.x))))\n    .endAngle((d) => Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))))\n    .innerRadius((d) => Math.max(0, y(d.y)))\n    .outerRadius((d) => Math.max(0, y(d.y + d.dy)));\n\n  let partition = d3.layout.partition()\n    .value((d) => d.value);\n\n  let nodes = partition.nodes(tree);\n\n  let path = svg\n    .selectAll('path')\n    .data(nodes)\n    .enter()\n    .append('path')\n    .attr('d', arc)\n    .attr('class', 'arc')\n    .style('fill', (d) => color((d.children ? d : d.parent).name))\n    .on('click', click);\n\n  let text = svg\n    .selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('transform', (d) => {\n      let rotate = x(d.x + d.dx / 2) * 180 / Math.PI - 90;\n      return `rotate(${rotate}) translate(${y(d.y)})`;\n    })\n    .attr('dx', '.5em')\n    .attr('dy', '.35em')\n    .text((d) => d.name)\n    .on('click', click);\n\n  // default CSS/SVG\n  path.attr({\n    'stroke': '#ffffff',\n    'fill-rule': 'evenodd',\n  });\n  text.attr({\n    'font-size': '10px',\n    'font-family': 'sans-serif',\n  });\n\n  let maxDepth = (d) => d.children ? Math.max.apply(Math, d.children.map(maxDepth)) : d.y + d.dy;\n\n  let arcTween = (d) => {\n    let xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),\n      yd = d3.interpolate(y.domain(), [d.y, maxDepth(d)]),\n      yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);\n\n    return (data) => (t) => {\n      x.domain(xd(t));\n      y.domain(yd(t)).range(yr(t));\n      return arc(data);\n    };\n  };\n\n  let isParentOf = (p, c) => {\n    if (p === c) {\n      return true;\n    }\n    if (p.children) {\n      return p.children.some((d) => isParentOf(d, c));\n    }\n    return false;\n  };\n\n  function click(d) {\n    path.transition()\n      .duration(750)\n      .attrTween('d', arcTween(d));\n    text.style('visibility', function (e) {\n        // required for showing labels just before the transition when zooming back to the upper level\n        return isParentOf(d, e) ? null : d3.select(this).style('visibility');\n      })\n      .transition()\n      .duration(750)\n      .attrTween('transform', (d) => () => {\n        let rotate = x(d.x + d.dx / 2) * 180 / Math.PI - 90;\n        return `rotate(${rotate}) translate(${y(d.y)})`;\n      })\n      .each('end', function (e) {\n        // required for hiding labels just after the transition when zooming down to the lower level\n        d3.select(this).style('visibility', isParentOf(d, e) ? null : 'hidden');\n      });\n  }\n};\n\n/*\n  Rendering sparql-results+json object into a circle pack\n\n  References:\n    http://mbostock.github.com/d3/talk/20111116/pack-hierarchy.html  Circle Packing\n\n  Options:\n    config = {\n      \"width\":    800,       // canvas width (optional)\n      \"height\":   800,       // canvas height (optional)\n      \"diameter\": 700,       // diamieter of the outer circle (optional)\n      \"selector\": \"#result\"\n      // options for d3sparql.tree() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.circlepack(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    text {\n      font-size: 11px;\n      pointer-events: none;\n    }\n    text.parent {\n      fill: #1f77b4;\n    }\n    circle {\n      fill: #cccccc;\n      stroke: #999999;\n      pointer-events: all;\n    }\n    circle.parent {\n      fill: #1f77b4;\n      fill-opacity: .1;\n      stroke: steelblue;\n    }\n    circle.parent:hover {\n      stroke: #ff7f0e;\n      stroke-width: .5px;\n    }\n    circle.child {\n      pointer-events: none;\n    }\n    </style>\n\n  TODO:\n    Fix rotation angle for each text to avoid string collision\n*/\n/**\n * @param {SparqlResults} json\n * @param {CirclePackConfig} config\n */\nd3sparql.circlepack = function (json, config = {}) {\n  let tree = (json.head && json.results) ? d3sparql.tree(json, config) : json;\n\n  let width = config.width || 800;\n  let height = config.height || 800;\n  let diameter = config.diameter || 700;\n  let selector = config.selector || null;\n\n  let w = width;\n  let h = height;\n  let r = diameter;\n  let x = d3.scale.linear().range([0, r]);\n  let y = d3.scale.linear().range([0, r]);\n\n  let pack = d3.layout.pack()\n    .size([r, r])\n    .value((d) => d.value);\n\n  let node = tree;\n  let nodes = pack.nodes(tree);\n\n  let vis = d3sparql.select(selector, 'circlepack').append('svg')\n    .attr('width', w)\n    .attr('height', h)\n    .append('g')\n    .attr('transform', 'translate(' + (w - r) / 2 + ',' + (h - r) / 2 + ')');\n\n  vis.selectAll('circle')\n    .data(nodes)\n    .enter()\n    .append('circle')\n    .attr('class', function (d) {\n      return d.children ? 'parent' : 'child';\n    })\n    .attr('cx', function (d) {\n      return d.x;\n    })\n    .attr('cy', function (d) {\n      return d.y;\n    })\n    .attr('r', function (d) {\n      return d.r;\n    })\n    /*\n        // CSS: circle { ... }\n        .attr(\"fill\", function(d) { return d.children ? \"#1f77b4\" : \"#cccccc\" })\n        .attr(\"fill-opacity\", function(d) { return d.children ? \".1\" : \"1\" })\n        .attr(\"stroke\", function(d) { return d.children ? \"steelblue\" : \"#999999\" })\n        .attr(\"pointer-events\", function(d) { return d.children ? \"all\" : \"none\" })\n        .on(\"mouseover\", function() { d3.select(this).attr(\"stroke\", \"#ff7f0e\").attr(\"stroke-width\", \".5px\") })\n        .on(\"mouseout\", function() { d3.select(this).attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", \".5px\") })\n    */\n    .on('click', function (d) {\n      return zoom(node === d ? tree : d);\n    });\n\n  vis.selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('class', function (d) {\n      return d.children ? 'parent' : 'child';\n    })\n    .attr('x', function (d) {\n      return d.x;\n    })\n    .attr('y', function (d) {\n      return d.y;\n    })\n    //    .attr(\"dy\", \".35em\")\n    .style('opacity', function (d) {\n      return d.r > 20 ? 1 : 0;\n    })\n    .text(function (d) {\n      return d.name;\n    })\n    // rotate to avoid string collision\n    //.attr(\"text-anchor\", \"middle\")\n    .attr('text-anchor', 'start')\n    .transition()\n    .duration(1000)\n    .attr('transform', function (d) {\n      return 'rotate(-30, ' + d.x + ', ' + d.y + ')';\n    });\n\n  d3.select(window).on('click', function () {\n    zoom(tree);\n  });\n\n  function zoom(d, i) {\n    let k = r / d.r / 2;\n    x.domain([d.x - d.r, d.x + d.r]);\n    y.domain([d.y - d.r, d.y + d.r]);\n    let t = vis.transition()\n      .duration(d3.event.altKey ? 2000 : 500);\n    t.selectAll('circle')\n      .attr('cx', function (d) {\n        return x(d.x);\n      })\n      .attr('cy', function (d) {\n        return y(d.y);\n      })\n      .attr('r', function (d) {\n        return k * d.r;\n      });\n    t.selectAll('text')\n      .attr('x', function (d) {\n        return x(d.x);\n      })\n      .attr('y', function (d) {\n        return y(d.y);\n      })\n      .style('opacity', function (d) {\n        return k * d.r > 20 ? 1 : 0;\n      });\n    d3.event.stopPropagation();\n  }\n};\n\n/*\n  Rendering sparql-results+json object into a treemap\n\n  References:\n    http://bl.ocks.org/4063582  Treemap\n\n  Options:\n    config = {\n      \"width\":    800,       // canvas width (optional)\n      \"height\":   500,       // canvas height (optional)\n      \"margin\":   {\"top\": 10, \"right\": 10, \"bottom\": 10, \"left\": 10},\n      \"selector\": \"#result\"\n      // options for d3sparql.tree() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.treemap(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    .node {\n      border: solid 1px white;\n      font: 10px sans-serif;\n      line-height: 12px;\n      overflow: hidden;\n      position: absolute;\n      text-indent: 2px;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {TreeMapConfig} [config={}]\n */\nd3sparql.treemap = function (json, config = {}) {\n  let tree = (json.head && json.results) ? d3sparql.tree(json, config) : json;\n\n  let width = config.width || 800;\n  let height = config.height || 500;\n  let count = config.count || false;\n  let color = config.color || d3.scale.category20c();\n  let margin = config.margin || { top: 0, right: 0, bottom: 0, left: 0 };\n  let selector = config.selector || null;\n\n  width = width - margin.left - margin.right;\n  height = height - margin.top - margin.bottom;\n\n  let getCount = (d) => 1;\n  let getSize = (d) => d.value;\n\n  let treemap = d3.layout.treemap()\n    .size([width, height])\n    .sticky(true)\n    .value(count ? getCount : getSize);\n\n  let div = d3sparql.select(selector, 'treemap')\n    .style('position', 'relative')\n    .style('width', width + 'px')\n    .style('height', height + 'px')\n    .style('left', margin.left + 'px')\n    .style('top', margin.top + 'px');\n\n  function position() {\n    this.style('left', function (d) {\n        return d.x + 'px';\n      })\n      .style('top', function (d) {\n        return d.y + 'px';\n      })\n      .style('width', function (d) {\n        return Math.max(0, d.dx - 1) + 'px';\n      })\n      .style('height', function (d) {\n        return Math.max(0, d.dy - 1) + 'px';\n      });\n  }\n\n  let node = div.datum(tree).selectAll('.node')\n    .data(treemap.nodes)\n    .enter()\n    .append('div')\n    .attr('class', 'node')\n    .call(position)\n    .style('background', (d) => d.children ? color(d.name) : null)\n    .text((d) => d.children ? null : d.name);\n\n  // default CSS/SVG\n  node.style({\n    'border-style': 'solid',\n    'border-width': '1px',\n    'border-color': 'white',\n    'font-size': '10px',\n    'font-family': 'sans-serif',\n    'line-height': '12px',\n    'overflow': 'hidden',\n    'position': 'absolute',\n    'text-indent': '2px',\n  });\n};\n\n/*\n  Rendering sparql-results+json object into a zoomable treemap\n\n  References:\n    http://bost.ocks.org/mike/treemap/  Zoomable Treemaps\n    http://bl.ocks.org/zanarmstrong/76d263bd36f312cb0f9f\n\n  Options:\n    config = {\n      \"width\":    800,       // canvas width (optional)\n      \"height\":   500,       // canvas height (optional)\n      \"margin\":   {\"top\": 10, \"right\": 10, \"bottom\": 10, \"left\": 10},\n      \"selector\": \"#result\"\n      // options for d3sparql.tree() can be added here ...\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      let config = { ... }\n      d3sparql.treemapzoom(json, config)\n    }\n\n  CSS/SVG:\n    <style>\n    rect {\n      cursor: pointer;\n    }\n    .grandparent:hover rect {\n      opacity: 0.8;\n    }\n    .children:hover rect.child {\n      opacity: 0.2;\n    }\n    </style>\n*/\n/**\n * @param {SparqlResults} json\n * @param {TreeMapZoomConfig} config\n */\nd3sparql.treemapzoom = function (json, config = {}) {\n  let tree = (json.head && json.results) ? d3sparql.tree(json, config) : json;\n\n  let opts = {\n    'width': config.width || 800,\n    'height': config.height || 500,\n    'margin': config.margin || { top: 25, right: 0, bottom: 0, left: 0 },\n    'color': config.color || d3.scale.category20(),\n    'format': config.format || d3.format(',d'),\n    'selector': config.selector || null\n  };\n\n  let width = opts.width - opts.margin.left - opts.margin.right;\n  let height = opts.height - opts.margin.top - opts.margin.bottom;\n  let color = opts.color;\n  let format = opts.format;\n  let transitioning;\n\n  let x = d3.scale.linear().domain([0, width]).range([0, width]);\n  let y = d3.scale.linear().domain([0, height]).range([0, height]);\n\n  let treemap = d3.layout.treemap()\n    .children(function (d, depth) {\n      return depth ? null : d.children;\n    })\n    .sort(function (a, b) {\n      return a.value - b.value;\n    })\n    .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))\n    .round(false);\n\n  let svg = d3sparql\n    .select(opts.selector, 'treemapzoom')\n    .append('svg')\n    .attr('width', opts.width)\n    .attr('height', opts.height)\n    .style('margin-left', -opts.margin.left + 'px')\n    .style('margin.right', -opts.margin.right + 'px')\n    .append('g')\n    .attr('transform', 'translate(' + opts.margin.left + ',' + opts.margin.top + ')')\n    .style('shape-rendering', 'crispEdges');\n\n  let grandparent = svg.append('g')\n    .attr('class', 'grandparent');\n\n  grandparent.append('rect')\n    .attr('y', -opts.margin.top)\n    .attr('width', width)\n    .attr('height', opts.margin.top)\n    .attr('fill', '#666666');\n\n  grandparent.append('text')\n    .attr('x', 6)\n    .attr('y', 6 - opts.margin.top)\n    .attr('dy', '.75em')\n    .attr('stroke', '#ffffff')\n    .attr('fill', '#ffffff');\n\n  let initialize = (tree) => {\n    tree.x = tree.y = 0;\n    tree.dx = width;\n    tree.dy = height;\n    tree.depth = 0;\n  };\n\n  // Compute the treemap layout recursively such that each group of siblings\n  // uses the same size (1×1) rather than the dimensions of the parent cell.\n  // This optimizes the layout for the current zoom state. Note that a wrapper\n  // object is created for the parent node for each group of siblings so that\n  // the parent’s dimensions are not discarded as we recurse. Since each group\n  // of sibling was laid out in 1×1, we must rescale to fit using absolute\n  // coordinates. This lets us use a viewport to zoom.\n  let layout = (d) => {\n    if (!d.children) {\n      return;\n    }\n    treemap.nodes({ children: d.children });\n    d.children.forEach((c) => {\n      c.x = d.x + c.x * d.dx;\n      c.y = d.y + c.y * d.dy;\n      c.dx *= d.dx;\n      c.dy *= d.dy;\n      c.parent = d;\n      layout(c);\n    });\n  };\n\n  initialize(tree);\n  layout(tree);\n  display(tree);\n\n  function display(d) {\n    grandparent\n      .datum(d.parent)\n      .on('click', transition)\n      .select('text')\n      .text(name(d));\n\n    let g1 = svg.insert('g', '.grandparent')\n      .datum(d)\n      .attr('class', 'depth');\n\n    let g = g1.selectAll('g')\n      .data(d.children)\n      .enter()\n      .append('g');\n\n    g.filter(function (d) {\n        return d.children;\n      })\n      .classed('children', true)\n      .on('click', transition);\n\n    g.selectAll('.child')\n      .data(function (d) {\n        return d.children || [d];\n      })\n      .enter()\n      .append('rect')\n      .attr('class', 'child')\n      .call(rect);\n\n    g.append('rect')\n      .attr('class', 'parent')\n      .call(rect)\n      .append('title')\n      .text(function (d) {\n        return format(d.value);\n      });\n\n    g.append('text')\n      .attr('dy', '.75em')\n      .text(function (d) {\n        return d.name;\n      })\n      .call(text);\n\n    function transition(d) {\n      if (transitioning || !d) return;\n      transitioning = true;\n      let g2 = display(d),\n        t1 = g1.transition().duration(750),\n        t2 = g2.transition().duration(750);\n\n      // Update the domain only after entering new elements.\n      x.domain([d.x, d.x + d.dx]);\n      y.domain([d.y, d.y + d.dy]);\n\n      // Enable anti-aliasing during the transition.\n      svg.style('shape-rendering', null);\n\n      // Draw child nodes on top of parent nodes.\n      svg.selectAll('.depth').sort(function (a, b) {\n        return a.depth - b.depth;\n      });\n\n      // Fade-in entering text.\n      g2.selectAll('text').style('fill-opacity', 0);\n\n      // Transition to the new view.\n      t1.selectAll('text').call(text).style('fill-opacity', 0);\n      t2.selectAll('text').call(text).style('fill-opacity', 1);\n      t1.selectAll('rect').call(rect);\n      t2.selectAll('rect').call(rect);\n\n      // Remove the old node when the transition is finished.\n      t1.remove().each('end', function () {\n        svg.style('shape-rendering', 'crispEdges');\n        transitioning = false;\n      });\n    }\n\n    return g;\n  }\n\n  function text(text) {\n    text.attr('x', function (d) {\n        return x(d.x) + 6;\n      })\n      .attr('y', function (d) {\n        return y(d.y) + 6;\n      });\n  }\n\n  function rect(rect) {\n    rect.attr('x', function (d) {\n        return x(d.x);\n      })\n      .attr('y', function (d) {\n        return y(d.y);\n      })\n      .attr('width', function (d) {\n        return x(d.x + d.dx) - x(d.x);\n      })\n      .attr('height', function (d) {\n        return y(d.y + d.dy) - y(d.y);\n      })\n      .attr('fill', function (d) {\n        return color(d.name);\n      });\n    rect.attr({\n      'stroke': '#ffffff',\n      'stroke-width': '1px',\n      'opacity': 0.8,\n    });\n  }\n\n  function name(d) {\n    return d.parent\n      ? name(d.parent) + ' / ' + d.name\n      : d.name;\n  }\n};\n\n/*\n  World Map spotted by coordinations (longitude and latitude)\n\n  Options:\n    config = {\n      \"let_lat\":  \"lat\",     // SPARQL letiable name for latitude (optional; default is the 1st letiable)\n      \"let_lng\":  \"lng\",     // SPARQL letiable name for longitude (optional; default is the 2nd letiable)\n      \"width\":    960,       // canvas width (optional)\n      \"height\":   480,       // canvas height (optional)\n      \"radius\":   5,         // circle radius (optional)\n      \"color\":    \"#FF3333,  // circle color (optional)\n      \"topojson\": \"path/to/world-50m.json\",  // TopoJSON file\n      \"selector\": \"#result\"\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      d3sparql.coordmap(json, config = {})\n    }\n\n  Dependencies:\n    * topojson.js\n      * Download from http://d3js.org/topojson.v1.min.js\n      * Put <script src=\"topojson.js\"></script> in the HTML <head> section\n    * world-50m.json\n      * Download from https://github.com/mbostock/topojson/blob/master/examples/world-50m.json\n*/\n/**\n * @param {SparqlResults} json\n * @param {CoordMapConfig} [config={}]\n */\nd3sparql.coordmap = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let let_lat = config.let_lat || head[0] || 'lat';\n  let let_lng = config.let_lng || head[1] || 'lng';\n  let width = config.width || 960;\n  let height = config.height || 480;\n  let radius = config.radius || 5;\n  let color = config.color || '#FF3333';\n  let topojsonFile = config.topojson || 'world-50m.json';\n  let selector = config.selector || null;\n\n  let projection = d3.geo.equirectangular()\n    .scale(153)\n    .translate([width / 2, height / 2])\n    .precision(.1);\n  let path = d3.geo.path()\n    .projection(projection);\n  let graticule = d3.geo.graticule();\n  let svg = d3sparql.select(selector, 'coordmap').append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  svg.append('path')\n    .datum(graticule.outline)\n    .attr('fill', '#a4bac7')\n    .attr('d', path);\n\n  svg.append('path')\n    .datum(graticule)\n    .attr('fill', 'none')\n    .attr('stroke', '#333333')\n    .attr('stroke-width', '.5px')\n    .attr('stroke-opacity', '.5')\n    .attr('d', path);\n\n  d3.json(topojsonFile, (error, world) => {\n    if (error) {\n      throw error;\n    }\n\n    svg.insert('path', '.graticule')\n      .datum(topojson.feature(world, world.objects.land))\n      .attr('fill', '#d7c7ad')\n      .attr('stroke', '#766951')\n      .attr('d', path);\n\n    svg.insert('path', '.graticule')\n      .datum(topojson.mesh(world, world.objects.countries, (a, b) => a !== b))\n      .attr('class', 'boundary')\n      .attr('fill', 'none')\n      .attr('stroke', '#a5967e')\n      .attr('stroke-width', '.5px')\n      .attr('d', path);\n\n    svg.selectAll('.pin')\n      .data(data)\n      .enter().append('circle', '.pin')\n      .attr('fill', color)\n      .attr('r', radius)\n      .attr('stroke', '#455346')\n      .attr('transform', function (d) {\n        return 'translate(' + projection([\n          d[let_lng].value,\n          d[let_lat].value\n        ]) + ')';\n      });\n  });\n};\n\n/*\n  World Map colored by location names defined in a TopoJSON file\n\n  Options:\n    config = {\n      \"label\":       \"name\",    // SPARQL letiable name for location names (optional; default is the 1st letiable)\n      \"value\":       \"size\",    // SPARQL letiable name for numerical values (optional; default is the 2nd letiable)\n      \"width\":       1000,      // canvas width (optional)\n      \"height\":      1000,      // canvas height (optional)\n      \"color_max\":   \"blue\",    // color for maximum value (optional)\n      \"color_min\":   \"white\",   // color for minimum value (optional)\n      \"color_scale\": \"linear\"   // color scale (optional; \"linear\" or \"log\")\n      \"topojson\":    \"path/to/japan.topojson\",  // TopoJSON file\n      \"mapname\":     \"japan\",   // JSON key name of a map location root (e.g., \"objects\":{\"japan\":{\"type\":\"GeometryCollection\", ...)\n      \"keyname\":     \"name\",    // JSON key name of map locations matched with \"label\" (e.g., \"properties\":{\"name\":\"Tokyo\", ...)\n      \"center_lat\":  34,        // latitude for a map location center (optional; default is 34 for Japan)\n      \"center_lng\":  137,       // longitude for a map location center (optional; default is 137 for Japan)\n      \"scale\":       10000,     // scale of rendering (optional)\n      \"selector\":    \"#result\"\n    }\n\n  Synopsis:\n    d3sparql.query(endpoint, sparql, render)\n\n    function render(json) {\n      d3sparql.namedmap(json, config = {})\n    }\n\n  Dependencies:\n    * topojson.js\n      * Download from http://d3js.org/topojson.v1.min.js\n      * Put <script src=\"topojson.js\"></script> in the HTML <head> section\n    * japan.topojson\n      * Download from https://github.com/sparql-book/sparql-book/blob/master/chapter5/D3/japan.topojson\n*/\n/**\n * @param {SparqlResults} json\n * @param {NamedMapConfig} [config={}]\n */\nd3sparql.namedmap = function (json, config = {}) {\n  let head = json.head.lets || json.head.vars || [];\n  let data = json.results.bindings;\n\n  let label = config.label || head[0] || 'label';\n  let value = config.value || head[1] || 'value';\n  let width = config.width || 1000;\n  let height = config.height || 1000;\n  let color_max = config.color_max || 'red';\n  let color_min = config.color_min || 'white';\n  let color_scale = config.color_scale || 'log';\n  let topojsonFile = config.topojson || 'japan.topojson';\n  let mapname = config.mapname || 'japan';\n  let keyname = config.keyname || 'name_local';\n  let center_lat = config.center_lat || 34;\n  let center_lng = config.center_lng || 137;\n  let scale = config.scale || 10000;\n  let selector = config.selector || null;\n\n  let size = d3\n    .nest()\n    .key((d) => d[label].value)\n    .rollup((d) => d3.sum(d, (d) => parseInt(d[value].value)))\n    .map(data, d3.map);\n  let extent = d3.extent((d3.map(size).values()));\n\n  debug(size);\n\n  let svg = d3sparql\n    .select(selector, 'namedmap').append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  d3.json(topojsonFile, (topojson_map) => {\n    let geo = topojson.object(topojson_map, topojson_map.objects[mapname]).geometries;\n    let projection = d3.geo.mercator()\n      .center([center_lng, center_lat])\n      .translate([width / 2, height / 2])\n      .scale(scale);\n    let path = d3.geo.path().projection(projection);\n    let scaleFn;\n    switch (color_scale) {\n      case 'log':\n        scaleFn = d3.scale.log();\n        break;\n      default:\n        scaleFn = d3.scale.linear();\n        break;\n    }\n    let color = scaleFn.domain(extent).range([color_min, color_max]);\n\n    svg.selectAll('path')\n      .data(geo)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('stroke', 'black')\n      .attr('stroke-width', 0.5)\n      .style('fill', function (d, i) {\n        // map SPARQL results to colors\n        return color(size[d.properties[keyname]]);\n      });\n\n    svg.selectAll('.place-label')\n      .data(geo)\n      .enter()\n      .append('text')\n      .attr('font-size', '8px')\n      .attr('class', 'place-label')\n      .attr('transform', function (d) {\n        let lat = d.properties.latitude;\n        let lng = d.properties.longitude;\n        return 'translate(' + projection([lng, lat]) + ')';\n      })\n      .attr('dx', '-1.5em')\n      .text((d) => d.properties[keyname]);\n  });\n};\n\n/**\n * @param {string|EventTarget} [selector] if not given, will use body\n * @param {string} type\n * @returns {d3.Selection<any>}\n */\nd3sparql.select = function (selector, type) {\n  const elem = selector ? d3.select(selector).html('') : d3.select('body');\n  return elem.append('div').attr('class', 'd3sparql ' + type);\n};\n\n/* Helper function only for the d3sparql web site */\nd3sparql.toggle = function () {\n  let button = d3.select('#button');\n  let elem = d3.select('#sparql');\n  if (elem.style('display') === 'none') {\n    elem.style('display', 'inline');\n    button.attr('class', 'icon-chevron-up');\n  } else {\n    elem.style('display', 'none');\n    button.attr('class', 'icon-chevron-down');\n  }\n};\n\n/* for IFRAME embed */\nd3sparql.frameheight = function (height) {\n  d3.select(self.frameElement).style('height', height + 'px');\n};\n"],"names":["d3sparql","version","debug","messages","args","message","push","JSON","stringify","console","fetch","async","url","init","res","headers","Accept","ok","Error","text","json","query","endpoint","sparql","type","URL","search","encodeURIComponent","href","formData","FormData","append","body","URLSearchParams","entries","method","TypeError","graph","config","head","lets","vars","data","results","bindings","key1","key2","label1","label2","value1","value2","valueToIndexMap","Map","index","i","length","datum","key1Val","value","key2Val","label1Val","label2Val","value1Val","value2Val","has","nodes","set","links","get","tree","rootKey","root","parentKey","parent","childKey","child","valueKey","pairMap","sizeMap","children","traverse","nodeName","list","map","d","subtotal","d3","sum","htmltable","columns","selector","limit","undefined","offset","slice","table","select","attr","thead","tbody","selectAll","enter","col","cells","row","val","style","htmlhash","barchart","label_x","label_y","let_x","let_y","width","height","margin","scale_x","scale","ordinal","rangeRoundBands","scale_y","linear","range","axis_x","svg","axis","orient","axis_y","domain","extent","parseInt","ax","call","ay","bar","rangeBand","piechart","label","size","holeSize","hole","radius","Math","min","max","color","category20","arc","outerRadius","innerRadius","pie","layout","g","centroid","scatterplot","label_r","let_r","min_r","max_r","margin_x","margin_y","extent_x","extent_y","extent_r","scale_r","circle","forcegraph","charge","distance","parseFloat","link","node","force","linkDistance","start","on","source","x","y","target","drag","sankey","nodeWidth","nodePadding","path","dy","sort","a","b","behavior","origin","parentNode","appendChild","this","event","relayout","dx","filter","roundtree","diameter","angle","depth","tree_layout","separation","diagonal","radial","projection","PI","name","dendrogram","cluster","sunburst","sqrt","startAngle","endAngle","partition","click","maxDepth","apply","isParentOf","p","c","some","transition","duration","attrTween","xd","interpolate","yd","yr","t","arcTween","e","each","circlepack","w","h","r","pack","vis","zoom","k","altKey","stopPropagation","window","treemap","count","category20c","top","right","bottom","left","sticky","treemapzoom","transitioning","opts","format","ratio","round","grandparent","forEach","rect","initialize","display","g1","insert","g2","t1","t2","remove","classed","coordmap","let_lat","let_lng","topojsonFile","topojson","geo","equirectangular","translate","precision","graticule","outline","error","world","objects","land","countries","namedmap","color_max","color_min","color_scale","mapname","keyname","center_lat","center_lng","nest","key","rollup","values","topojson_map","scaleFn","geometries","mercator","center","log","properties","lat","latitude","lng","longitude","html","toggle","button","elem","frameheight","self","frameElement"],"mappings":"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"}